---
title: "Validation Model, NCQA My HEDIS 2023"
subtitle: "Antidepressant Medication Management"
author: 
  name: "John Ryan Kivela, MA and Victoria Tewa, LPC"
  email: "Ryan.Kivela@narbha.org"
  affiliation: "The Alliance ACO"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

This document provides the data framework for the AMM Validation model. The core datasets used in that evaluation are collected through the code herein. 

# Set Up

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(readxl)
library(kableExtra)
library(gt)
library(scales)
library(utils)
library(lubridate)
library(RODBC)
library(DBI)
library(odbc)
library(dbplyr)

# Set up ODBC Connection
 QRPTP01 <- DBI::dbConnect(odbc::odbc(),"AllianceData")

# Create table for inline code
InLineCode <- data.frame(
  ReportDate = "04-27-2023",
  MeasurementYear = "01-01-2023 to 12-31-2023",
  ClaimsAdjudicatedThrough = "02-28-2023",
  HEDISVersion = "My 2023",
  IntakePeriod = "05-01-2022 to 04-30-2023",
  NegativeMedicationHistory = "01-16-222 to 01-15-2023",
    IPSDstart_date = as.Date("2022-05-01"),
    IPSDend_date = as.Date("2023-04-30"),
    NMHstart_date = as.Date("2022-01-16"),
    NMHend_date = as.Date("2023-01-15")
)

# Vector of Alliance Provider Name
Provider_ShortName <- (c("CBI", "CPIH", "EHS", "LCBHC", "MMHC", "SHG", "SBH", "TGC", "WYGC"))

# Vector of NAZ Counties
NAZ_Counties <- (c("Apache", "Coconino", "Mohave", "Navajo", "Yavapai"))

# Value Sets
MyHEDIS2023_AllValueSetsToCodes <- read_xlsx("./documents/M. HEDIS MY 2024 Volume 2 Value Set Directory 2023-08-01.xlsx", sheet = "Value Sets to Codes")

```

# Pre-Load Data

This set of code loads data sets that are collected in the scripts below. This serves the purpose of allowing us to work with the code without having to re-query the data every time. The code chunks beolow must be run at least once in order to create the data tables that are loaded in this section

```{r}
# # Enrollment Data
# Enrollments_AllACC <- read.csv("./data/input/Enrollments_AllACC.csv")
# GM_ALLAZ_Enrollments <- read.csv("./data/input/GM_AllAZ_Enrollments.csv")
# GM_ALLAZ_Addresses <- read.csv("./data/input/GM_AllAZ_Addresses.csv")
# 
# # Clinic Assignment
# GM_PrimaryAssignedClinic <- read.csv("./data/input/GM_PrimaryAssignedClinic.csv")
# GM_HealthHomes <- read.csv("./data/input/GM_HealthHomes.csv")
# 
# # Demographics
# Clients_Demographics_AllACC <- read.csv("./data/input/Clients.csv")
# GM_DUGLess <- read.csv("./data/input/DUGLess.csv")
# 
# # Claims
# Claims_AllHCA <- read.csv("./data/input/Claims_AllHCA.csv")
# 
# # Summary
# AllTheVariables <- read.csv("./data/AllTheVariables.csv")

```

# Enrollments

The next few code sets queries the HCA data bases to gather data from the Global Members Data base.

## Enrollment Roster

```{sql, connection = QRPTP01, output.var = "Enrollments_AllACC"}
#| label: AHCCCS Enrollments
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

declare @AzACC int = narbha.dbo.ufn_GetIntLobIdFromLobName('ArizonaAcc', getdate());

declare @AzRbha int = narbha.dbo.ufn_GetIntLobIdFromLobName('AzRBHA', getdate());

declare @AzSO int = narbha.dbo.ufn_GetIntLobIdFromLobName('AZ State Only', getdate());

declare @AzHCIC int = narbha.dbo.ufn_GetIntLobIdFromLobName('HCIC', getdate());

SELECT * 

FROM GlobalMembers.dbo.Enrollments 

WHERE lobid = @AzACC 
  AND void = 0 
  
ORDER BY PrimaryId , EnrollmentDate DESC

```

```{r}
#| label: Write AHCCCS Enrollments
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Write to CSV
write.csv(Enrollments_AllACC, "./data/input/Enrollments_AllACC.csv")

```

## All AZ Enrollments Data

```{sql, connection = QRPTP01, output.var = "GM_ALLAZ_Enrollments"}
#| label: GM All AZ Enrollments
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

SELECT * 

FROM GlobalMembers.dbo.DailyMemberShipAllArizonaEnrollments

WHERE void = 0 
  
ORDER BY PrimaryId
```

```{r}
#| label: Write GM All AZ Enrollments
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Write to CSV
write.csv(GM_ALLAZ_Enrollments, "./data/input/GM_AllAZ_Enrollments.csv")

```

## All AZ Addresses Data

```{sql, connection = QRPTP01, output.var = "GM_ALLAZ_Addresses"}
#| label: GM All AZ Addresses
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

SELECT * 

FROM GlobalMembers.dbo.DailyMemberShipAllArizonaAddresses

WHERE Void = 0 
  
```

```{r}
#| label: Write GM All AZ Addresses
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Write to CSV
write.csv(GM_ALLAZ_Addresses, "./data/input/GM_AllAZ_Addresses.csv")

```


## Demographics

### Client Demographics

```{sql, connection = QRPTP01, output.var = "Clients_Demographics_AllACC"}
#| label: Client Demograhics
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

declare @AzACC int = narbha.dbo.ufn_GetIntLobIdFromLobName('ArizonaAcc', getdate());

declare @AzRbha int = narbha.dbo.ufn_GetIntLobIdFromLobName('AzRBHA', getdate());

declare @AzSO int = narbha.dbo.ufn_GetIntLobIdFromLobName('AZ State Only', getdate());

declare @AzHCIC int = narbha.dbo.ufn_GetIntLobIdFromLobName('HCIC', getdate());

SELECT * 

FROM GlobalMembers.dbo.Clients

WHERE lobid = @AzACC 
  AND void = 0 
  
ORDER BY LastName DESC

```

```{r}
#| label: Write Client Demographics
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Write to CSV
write.csv(Clients_Demographics_AllACC, "./data/input/Clients.csv")

```

# Claims

These next few codes sets query the HCA databases for claims data for all types of claims.

## All claims from VOS table

```{r}

Claims_AllTGC <- read.csv("./data/output/AllTGCClaims_2023.csv")

# Set up ODBC Connection
 QRPTP01 <- DBI::dbConnect(odbc::odbc(),"AllianceData")
```

```{sql, connection = QRPTP01, output.var = "Claims_AllTGC"}

SELECT
  RA,
  AHCCCSID,
  svccode,
  providername,
  calcnetpd,
  fedtaxid,
  iscrisis_UH,
  isUBCrisis,
  crisisind,
  daycrisis,
  is24crisis,
  paycontract,
  paysource,
  placesvc,
  providertype,
  facilitylevel,
  admtype,
  admitdate,
  dischargedate,
  memberprogram,
  eligibility,
  age,
  age_group,
  population,
  primarydiagnosis,
  dx1,
  dx2,
  dx3,
  dx4,
  dx5,
  dx6,
  dx7,
  dx8,
  dx9,
  dx10,
  dx11,
  dx12,
  memberACCgsa,
  memberRBHAgsa,
  memberservicearea,
  memberzipcode,
  membercounty,
  providerACCgsa
  providerRBHAgsa,
  renderingproviderservicearea,
  renderingproviderzipcode,
  renderingprovidercounty,
  encounterstatus,
  encounterstatusdate,
  pcpname,
  isopioddx,
  issabgdx
  
FROM
  claims.dbo.shcavos
  
WHERE
  RA = 'TGC' AND
  begdate BETWEEN '1/1/2023' AND '12/31/2023'


```

```{r}
write.csv(Claims_AllHCA, "./data/output/AllTGCClaims_2023.csv")

```

```{r}
# Filter MyHEDIS2023_AllValueSetsToCodes for "Inpatient Stay" and store the codes in IPCodes
IPValueSet <- "Inpatient Stay"
IPCodes <- MyHEDIS2023_AllValueSetsToCodes$Code[MyHEDIS2023_AllValueSetsToCodes$`Value Set Name` == IPValueSet]

# Filter Claims_AllTGC for service codes found in IPCodes
Claims_IP_TGC_2023 <- Claims_AllTGC[Claims_AllTGC$svccode %in% IPCodes, ]

columns_to_drop <- c(1, 10, 12, 15, 17, 18, 21, 22, 40, 43, 45)

Claims_IP_TGC_2023 <- Claims_IP_TGC_2023[, -columns_to_drop]

write.csv(Claims_IP_TGC_2023, "./data/output/Claims_IP_TGC_2023.csv")
```

```{r}
#| label: Write Claims All HCA
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Write to CSV
write.csv(Claims_AllHCA, "./data/input/Claims_AllHCA.csv")
```



# All The Varaibles

This is a summary table that lists out all of the variables from the data above for ease of use in designing analyses.

```{r}
# 
# Enrollments.Vars <- names(Enrollments_AllACC)
# Clients.Vars <- names(Clients_Demographics_AllACC)
# Claims.Vars <- names(Claims_AllHCA)
# GM_ALLAZ_Enrollments.Vars <- names(GM_ALLAZ_Enrollments)
# GM_ALLAZ_Addresses.Vars <- names(GM_ALLAZ_Addresses)
# GM_PrimaryAssignedClinic.Vars <- names(GM_PrimaryAssignedClinic)
# GM_HealthHomes.Vars <- names(GM_HealthHomes)
# GM_DUGLess.Vars <- names(GM_DUGLess)
# Claims_PBM_AllHCA.Vars <- names(Claims_PBM_AllHCA)
# 
# max.len = max(length(Enrollments.Vars), length(Clients.Vars), length(Claims.Vars))
# Enrollments.Vars = c(Enrollments.Vars, rep(NA, max.len - length(Enrollments.Vars)))
# Clients.Vars = c(Clients.Vars, rep(NA, max.len - length(Clients.Vars)))
# Claims.Vars = c(Claims.Vars, rep(NA, max.len - length(Claims.Vars)))
# GM_ALLAZ_Enrollments.Vars = c(GM_ALLAZ_Enrollments.Vars, rep(NA, max.len - length(GM_ALLAZ_Enrollments.Vars)))
# GM_ALLAZ_Addresses.Vars = c(GM_ALLAZ_Addresses.Vars, rep(NA, max.len - length(GM_ALLAZ_Addresses.Vars)))
# GM_PrimaryAssignedClinic.Vars = c(GM_PrimaryAssignedClinic.Vars, rep(NA, max.len - length(GM_PrimaryAssignedClinic.Vars)))
# GM_HealthHomes.Vars = c(GM_HealthHomes.Vars, rep(NA, max.len - length(GM_HealthHomes.Vars)))
# GM_DUGLess.Vars = c(GM_DUGLess.Vars, rep(NA, max.len - length(GM_DUGLess.Vars)))
# Claims_PBM_AllHCA.Vars = c(Claims_PBM_AllHCA.Vars, rep(NA, max.len - length(Claims_PBM_AllHCA.Vars)))
# 
# AllTheVariables <- data.frame(Enrollments.Vars,
#                               Clients.Vars,
#                               Claims.Vars,
#                               Claims_PBM_AllHCA.Vars,
#                               GM_ALLAZ_Enrollments.Vars,
#                               GM_ALLAZ_Addresses.Vars,
#                               GM_PrimaryAssignedClinic.Vars,
#                               GM_HealthHomes.Vars,
#                               GM_DUGLess.Vars
#                               )

## Write to CSV
# write.csv(AllTheVariables, "./data/input/AllTheVariables.csv")

```

